import { mkdir, stat, writeFile } from "fs/promises";
import { resolve } from "path";
import { Logger } from "../../../adapter/internal/logger/logger";

import { isImportable } from "../../../utilities/is-importable";
import { ls } from "../../../utilities/ls";
import { findRootDir } from "../../../utilities/root-dir";

export const generateComposableDeclarations = async () => {
	const projectRoot = findRootDir();

	const dir = resolve(projectRoot, "./src/composables");

	if (!isPathValid(dir)) return;

	const declarations = [
		"// This file was autogenerated by Serve",
		"export {}",
		"declare global {",
	];

	for await (const x of ls(dir)) {
		if (isImportable(x)) {
			const i = await import(x);

			if (!i.default) continue;

			const filenameRegex = /[\w\d-]*.ts/gim;
			const filename = x.match(filenameRegex)?.pop();

			if (!filename) continue;

			const composableName = i.default.name;

			if (!composableName) {
				Logger.error(`Composable ${x} must be named`);

				continue;
			}

			declarations.push(
				`\tconst ${composableName}: typeof import("${x.replace(
					/\.ts|\.js/gim,
					"",
				)}")["default"]`,
			);
		}
	}

	declarations.push("}");

	await createFolder(`${projectRoot}/src/serve/types`);

	await writeFile(
		`${projectRoot}/src/serve/types/composables.d.ts`,
		declarations.join("\n"),
		{ flag: "w+" },
	);
};

const isPathValid = async (path: string) => {
	try {
		await stat(path);
		return true;
	} catch (error: any) {
		return false;
	}
};

const createFolder = async (path: string) => {
	try {
		await stat(path);
	} catch (error: any) {
		await mkdir(path, { recursive: true });
	}
};
